* functions
** math functions
*** expt
    Exponentiation to a specific power.
    #+begin_src Lisp
    ;; 2^3 = 8
    (expt 2 3)
    #+end_src
*** exp
    Exponentiation with base e.
    #+begin_src Lisp
    ;; e^2 = 7.389056
    (exp 2)
    #+end_src
*** ash
    Arithmetic shift.
    #+BEGIN_SRC Lisp
    ;; shift left (=20)
    (ash 10 1)
    ;; shift right (=5)
    (ash 10 -1)
    #+END_SRC
** definition functions
*** defparameter
    Allows the definition of global variables. By convention, global variable
    names are surrounded by *, known as /earmuffs/, so that they are easier
    to distinguish from local variables.
    
    Any value that was previously stored in the variable is overwritten. See
    [[defvar]] for a way to do it without overwriting.
    #+BEGIN_SRC Lisp
    ;; Defining a new parameter
    (defparameter *glob* 10)
    ;; Overwriting the parameter
    (defparameter *glob* 5)
    #+END_SRC
*** defvar
    Allows the definition of global variables, but does not overwrite previous
    values if they already exist.
    
    [[defparameter]] allows the overwriting of the value in global variables.
    #+BEGIN_SRC Lisp
    ;; Defining a new parameter
    (defvar *glob* 10)
    ;; attempting to overwrite (*glob* is still 5)
    (defvar *glob* 5)
    #+END_SRC
*** defun
    Allows the definition of a function.
    #+BEGIN_SRC Lisp
    (defun func (param1 param2) 
    (car '(test function heellooo)))
    #+END_SRC
*** let
    Allows the definition of local variables. The variables are only accessible
    in the body of the let function, after the variable definitions. The whole
    list of declared variables is surrounded by parens, as well as each
    individual variable definitions.

    #+begin_src Lisp
    (let ((a 5)
          (b 6))
     (+ a b))
    #+end_src
*** let*
    Allows the definition of local variables, and in addition allows the
    variables to refer to each other in their definitions.
    
    #+begin_src Lisp
    (let ((a 5)
          (b (+ a 2)))
     (+ a b))
    #+end_src
*** flet
    Allows the definition of local functions in very much the same way as the let
    function. The list of functions is surrounded by parens, and so is each
    individual function definition.

    The functions can only be used within the body of the flet function, and
    cannot reference each other or themselves. To do that, you need [[labels]].
    #+begin_src Lisp
    ;; single function
    (flet ((f (n)
    (+ n 10)))
    (f 5))
    ;; multiple functions
    (flet ((f (n)
    (+ n 10))
    (g (n)
    (* n 2)))
    (g (f 10)))
    #+end_src
*** labels
    Allows the definition of local functions. The difference from [[flet]] is that
    local functions can call each other or themselves.
    #+begin_src Lisp
    (labels ((a (n)
    (+ n 5))
    (b (n)
    (+ (a n) 6)))
    (b 10))
    #+end_src
** list functions
*** cons
    Two pieces of data can be linked with this, regardless of type. This
    allocates a cons cell which holds two references to the things being
    linked. Usually, the second item linked is a list.
    #+begin_src Lisp
    (cons 'cat 'dog)
    #+end_src
    The above links the =cat= and =dog= together. In the REPL, this link is
    represented by a =.= in between the two symbols, like =(CAT . DOG)=.
    
    The =nil= symbol is special, as it is a list terminator. Consing anything
    with a =nil= on the right hand side results in a list.
    #+begin_src Lisp
    (cons 'cat 'nil)
    #+end_src
    The above results in a list which contains just =cat=. Lisp hides cons cells
    as much as possible, preferring to display things as lists.

    The function also allows you to add things to the front of a list.
    #+begin_src Lisp
    (cons 'cat '(dog rabbit))
    #+end_src
    
    All lists are constructed from linked cons cells, so what the above is
    actually doing is:
    #+begin_src Lisp
    (cons 'cat (cons 'dog (cons 'rabbit 'nil)))
    #+end_src

    /A chain of cons cells and a list are the same thing!/
*** car
    This retrieves the item in the first slot of a cell, or the head of a given
    list; =(car '(cat dog rabbit))= would give you =cat=.
    
*** cdr
    This retrieves the item in the second slot of a cell, or the list without
    its first element; =(cdr '(cat dog rabbit))= would give you =(dog rabbit)=.
*** c****r
    The =car= and =cdr= functions can be strung together up to depth 4 to create a
    convenient list access function. For example, rather than applying =cdr= and
    then =car= to a list to access the second element, you can simply apply
    =cadr=.
    #+begin_src Lisp
    (car (cdr '(cat dog rabbit)))
    ;; is equivalent to 
    (cadr '(cat dog rabbit))
    #+end_src
*** list
    Creates a list from a series of symbols.
    #+begin_src Lisp
    (list 'cat 'dog 'rabbit)
    ;; is equivalent to...
    (cons 'cat (cons 'dog (cons 'rabbit ())))
    ;; is equivalent to
    '(cat dog rabbit)
    #+end_src
*** member
    Returns the element and subsequent list if the queried element is a member.
    #+begin_src Lisp
    ;; returns '(1 4 5)
    (member 1 '(2 3 1 4 5))
    #+end_src
*** find-if
    Finds the first value in a list for which a given function evaluates to
    true.
    #+begin_src Lisp
    (find-if #'oddp '(2 4 6 5 2 4))    
    #+end_src
*** append
    Joins several lists into a single one.
    #+begin_src Lisp
    (append '(hi) '(my name is) '(kurt))
    #+end_src
*** find
    Search a list for an item, and return the item.
    #+begin_src Lisp
    (find 'cat '(dog car cat rabbit))
    #+end_src
*** push
    Add an element to the front of an existing list.
    #+begin_src Lisp
    (defparameter *items* '(dog car truck rabbit))
    (push 'cat *items*)
    #+end_src
*** set-difference
    Return all items present in one list that are not present in the other.
    #+begin_src Lisp
    (set-difference '(cat dog rabbit bunny horse cheese) '(cat dog horse))
    #+end_src
** alist functions
*** assoc
    Returns the /first/ key-value pair in an alist which matches the given key.
    #+begin_src Lisp
    (defparameter *colours* '((red primary)
			      (blue primary)
			      (green primary)
			      (purple (not primary))))
    (assoc 'red *colours*)
    #+end_src
** command line interaction
*** print
    Allows the printing of stuff to the console, with a newline at the end, and
    a space after the value. The value of the statement is the thing being
    printed, a side effect of which is that things will be printed twice in the
    REPL.
    #+begin_src Lisp
    (print '(cat dog mousse))
    #+end_src
    Almost everything in Lisp can be printed with this function, with minimal
    loss, such that they can be read back in using the =read= function.
*** prin1
    The same as print, but with no newline.
*** princ
    Tries to print things in a form that humans would prefer (i.e. without
    quotation marks and other extraneous bits). Can be used to generate any
    arbitrary bit of text, unlike print, which is limited by its printing
    objects so that they can be read back in.
*** read
    Reads input from the user from the REPL. Returned to the program when return
    is pressed.
    #+begin_src Lisp
    (defun hi ()
	   (print "type something:")
	   (let ((words (read)))
	     (print "you typed: ")
	     (print words)))
    #+end_src
    Can read practically anything that is a lisp structure - this means that it
    can read stuff from files if it was output in the correct form.

    This command is dangerous, and can potentially be exploited by hackers to do
    stuff that you don't want them to do.
*** read-line
    Reads a line, treating whatever was entered as a string.
    #+begin_src 
    (defun say-hello ()
	   (princ "please type your name:")
	   (let ((name (read-line)))
		 (princ "nice to meet you,")
		 (princ name)))
    #+end_src
** test functions
*** alphanumericp
    Test if a character is alphanumeric.
*** digit-char-p
    Test if a character is a digit.
*** oddp
    True if a number is odd
    #+begin_src Lisp
    ;; evaluates to T
    (oddp 1)
    ;; evaluates to nil
    (oddp 2)
    #+end_src
*** evenp
    True if a number is even
    #+begin_src Lisp
    ;; evaluates to nil
    (evenp 1)
    ;; evaluates to T
    (evenp 2)
    #+end_src

** manipulation functions
*** remove-if-not
    Removes every item from a list which does not return true for a given
    function.
    #+begin_src Lisp
    (remove-if-not #'oddp '(1 2 3 4 5 6 7 8 9))
    #+end_src
*** substitute-if
    Substitute values based on a test function. Generic function.
    #+begin_src Lisp
    ;; lists
    (substitute-if 'cat (lambda (nm) : (eq nm 'dog)) '(dog rabbit puppy dog dog
    moggy mogwog))
    ;; or strings
    (substitute-if #\R (lambda (c) : (eq c #\e)) "hello me heartees, the feast
    will begin!")
    #+end_src

** file operation functions
*** with-open-file
    Similar to the =let= command, but defines a stream variable which can be
    used for various operations to do with files.
    #+begin_src Lisp
    (with-open-file (my-stream
                     "testfile.txt"
		     :direction :output
		     :if-exists :supersede)
     (princ "Hello file!" my-stream))
    #+end_src
     Lots of keyword parameters. 
** other functions
*** mapcar
    Takes a function and a list, and applies the function to every member of the
    list, creating a new list containing the function return values.
    #+begin_src Lisp
    (mapcar #'exp '(1 3 5 7 9))
    #+end_src
*** maplist
    Similar to =mapcar=, but instead of just receiving the front of the list,
    the function that the list is passed to receives the current element, plus
    all the elements after it in the list.
    #+begin_src Lisp
    (maplist #'print '(a s d f one two three))
    #+end_src
*** mapc
    More efficient version of mapcar, which does not return the transformed list.
*** progn
    Used often in =if= statements when more than one thing has to be done in a
    branch. Only the last evaluation in the expression is returned as the value
    of the whole expression. Basically, it allows you to do multiple things in a
    single expression and only return the value of the last thing.
    #+begin_src Lisp
    (defvar *was-odd* nil)
    (if (oddp 5)
    ;; doing two things!
    (progn (setf *was-odd* t)
	   'odd)
    'even)
    #+end_src
*** apply
    Given a function and a list of objects, it will apply the function to each
    separate object in the list.
    #+begin_src Lisp
    (apply #'append '((cheese) (is really rather) (tasty I believe)))
    #+end_src
    Can have problems with very long lists. Use =call-arguments-limit= variable
    to see what it is.
*** eval
    Allows the execution of data as code.
    #+begin_src Lisp
    (defparameter *sum* '(+ 2 3))
    (eval *sum*)
    #+end_src
    Do not overuse this! There are times when macros are more appropriate.

    This command is dangerous, and can potentially be exploited by hackers to do
    stuff that you don't want them to do.
*** concatenate
    Can be used to concatenate lists or strings.
    #+begin_src Lisp
    (concatenate 'string "hi " "i'm" " going to a party")
    (concatenate 'list '(demons are present) '(in the fun) '(house))
    #+end_src
*** quote
    Used to add a quote to the start of something. =\'foo= and =(quote foo)= are
    equivalent.
    #+begin_src Lisp
    (append '(time) '(is null))
    ;; broken because list is not quoted
    ;(append '(time) (is null))
    ;; the quote function adds a quote, the append works
    (append '(time) (quote (is null)))
    #+end_src
*** coerce
    Allows conversion between strings and lists
    #+begin_src Lisp
    (defparameter a nil)
    ;; string to list
    (setf a (coerce "I am a string variable!" 'list))
    ;; get a string back from a
    (coerce a 'string)
    #+end_src
*** complement
    Creates the opposite of a test function such as alphanumericp.
    #+begin_src Lisp
    (substitute-if #\Z #'alphanumericp "This is a 123 &!^!^ 8123 string")
    (substitute-if #\Z (complement #'alphanumericp) "This is a 123 &!^!^ 8123 string")
    #+end_src 
*** prin1-to-string
    Prints a symbol to a string with no newline terminator.
*** write-to-string
    Write something to a string. This function has a lot of keyword options
    which modify its output.
*** funcall
    Calls a function, usually one which is received as a parameter.
    #+begin_src Lisp
    (defun my-func (number func)
      (+ (funcall func) number))

    (my-func 10 (lambda () 20))
    #+end_src
*** load
    Loads the lisp code from the given file so that it can be used in the
    current file.
    #+begin_src Lisp
    ;; allow the use of functions defined in the file graph-gen.lisp
    (load "graph-gen")    
    #+end_src
*** random
    Generates a random integer in the range [0,arg).
    #+begin_src Lisp
    (random 10)
    #+end_src
*** loop
    Used to loop over various types of data. Can be used to create lists.
    #+begin_src Lisp
    ;; list of 10 ones
    (loop repeat 10 collect 1)
    ;; list from 1..10
    (loop for n from 1 to 10 collect n)
    #+end_src
    The collect command specifies what we should put into the list on each
    loop. Loop and connect are linked. After collect we can specify any
    arbitrary operation to define what gets added to the list.
* structures
** association list
   Also known as an alist. Associates data with a lookup key. Can find a value
   in an alist by using the assoc function.
   #+begin_src Lisp
   (defparameter *colours* '((red primary)
			     (blue primary)
			     (green primary)
			     (purple (not primary))))
   (assoc 'red *colours*)
   #+end_src

   According to convention, the first appearance of the key in the list is
   assumed to contain the value that you are interested in. This is very much
   related to the [[push/assoc idiom]].

   Alists are relatively slow for anything more than about 12 items, so other
   structures might be more useful.
** dotted list
   A list which ends in something other than a =nil=. Not so useful for
   programming, but as cons cells are used so much, can be encountered
   occasionally.
   #+begin_src Lisp
   (cons 1 (cons 2 3)
   #+end_src
   Can also think of the dot notation as an alternate way of defining lists:
   #+begin_src Lisp
   '(1 . (2 . (3 . nil)))
   #+end_src
** pairs
   Common and practical use of dotted lists. Good because you can extract stuff
   from pairs just using =car= and =cdr=, and efficient because only one cons
   cell has to be allocated.
   #+begin_src Lisp
   (cons 1 2)
   #+end_src
** circular list
   Before playing with circular lists, remember to do this:
   #+begin_src 
   (setf *print-circle* t)
   #+end_src
   Cons cells can point to anything in memory, and so it makes sense that a cell
   at the end of a list can point to the one at the start, or any other one in
   the list, as they are all in theory independent entities.
   
   Creating a circular list is relatively easy---we just need to make the end of
   the list point to the start (for example)
   #+begin_src Lisp
   (defparameter lst '(1 2 3))
   (setf (cdddr lst) lst)
   #+end_src
* syntax
** conditionals
Conditional commands are often [[special form]]s, which means that they do not have
to evaluate all their parameters.
*** if
    Can be used to do different things when the condition is true, or to check
    whether a list is empty.
    #+begin_src Lisp
    ;; evaluates to 'yes
    (if (= (+ 1 3) 4)
        'yes
        'no)
    ;; evaluates to 'no
    (if (= (+ 1 2) 4)
        'yes
        'no)
    ;; evaluates to 'empty
    (if '()
        'non-empty
        'empty)
    ;; evaluates to 'non-empty
    (if '(1)
        'non-empty
        'empty)
    #+end_src
    *important:*
    1. Only one of the expressions after the =if= is evaluated!
    2. It is only possible to do one thing in an =if= (no long extra
       computations!)
    
    Because =if= is a special form, it does not have to execute all of its
    parameters. This can lead to problems, for example:
    #+begin_src Lisp
    (if (oddp 5)
        'odd
        (/ 1 0))
    #+end_src
    The second branch does not have to be evaluated, and so a glaring error can
    be completely ignored.

    In a plain =if=, you can only do one thing, that is, you cannot have more
    than one expression being evaluated. In order to do so, you must use
    [[progn]]
*** when, unless
These conditionals can be used to evaluate multiple expressions without having
to use a =progn= like with =if=. However, they do not have the ability to do
anything when the condition is evaluated the opposite to what is required; =nil=
is returned.
**** when
    Enclosed expressions are evaluated when the condition is *true*.
    #+begin_src Lisp
    (defvar *was-odd* nil)
    (when (oddp 5)
      ;; doing multiple things without progn!
      (setf *was-odd* t)
      'odd)
    #+end_src
**** unless
    Enclosed expression are evaluated when the condition is *false*.
    #+begin_src Lisp
    (defvar *was-odd* nil)
    (unless (oddp 4)
      ;; doing multiple things without progn!
      (setf *was-odd* t)
      'odd)
    #+end_src
*** cond
    Allows the execution of a number of branches, with implicit =progn=. The
    classic Lisp conditional.
    #+begin_src Lisp
    (defun num-test (n)
    (cond ((= n 5) (+ 10 2) '(it's five))
	  ((oddp n) (+ 3 5) '(it's odd))
	  (t (* 2 3) '(it's boring))))
    #+end_src
    The branches are separated by parens, and the first item in each set of
    parens is the condition for that branch. Conditions are checked from the top
    down. The =t= at the end guarantees that the last branch will be executed,
    which is a common way of using =cond=.
*** case
    Implicitly uses =eq= to compare values against one that has been provided. 
    #+begin_src Lisp
    (defun name-test (name)
      (case name
        ((john) (+ 1 2) '(it was john))
        ((seb) (+ 1 3) '(it was seb))
        (otherwise '(i don't know who))))
    #+end_src
    =case= can be more efficient than =cond=, especially when there are a large
    number of conditions.

    *important:* =case= uses =eq= for comparison! This means that you cannot use
    it to compare some things (e.g. strings).
** true and false
   In Lisp, the only thing that evaluates to false is the empty list; /any value
   which is not equivalent to the empty list is true/.
   
   There are several aliases for the empty list =()=. They are =nil=, =\'nil=,
   and =\'()=, which can be confirmed by checking their equality:
   #+begin_src Lisp
   (eq '() nil)
   (eq '() ())
   (eq '() 'nil)
   #+end_src
   The first two things in this look weird, because they are not being treated
   as data (or so it seems). Actually, the language is made such that they both
   evaluate to the empty list. =nil= evaluates to itself, allowing omission of
   the quote, and =()= is a by-product of the way that empty forms are
   parsed. The last case works because =()= and =nil= should be treated the same
   according to the spec.

   There is some debate as to whether the empty list and falsity should be the
   same thing.
** equality
*** eq
    Used to compare symbols with other symbols.

    Can also compare conses, but returns true only if a cons is compared
    directly to itself.
    #+begin_src Lisp
    ;; preferred way of comparing symbols
    (eq 'cat 'cat)
    #+end_src
*** equal
    Used to compare things which look the same. If unsure about which equality
    to use, use this one.
    #+begin_src Lisp
    ;; lists
    (equal '(1 2 3) (cons 1 (cons 2 (cons 3 nil)))))
    (equal '(1 2 3) '(1 2 3))
    ;; symbols
    (equal 'cat 'cat)
    #+end_src
*** eql
    Similar to eq, but also does number and character comparisons.
*** equalp
    Essentially the same as equals, but handles string with different
    capitalisation, and can compare floating point numbers with integers.
*** specific data types
    =\== is used to compare numbers
    
    =string-equal= is for strings
    
    =char-equal= is for characters
** special characters
*** '
    The single quote mark enters data mode. Anything in this mode will be treated
    as data and not as any type of command. This is called quoting.
*** #'
    A shortcut for the =function= operator. Allows the direct referencing of a
    function, ensuring that it is not confused with local variable names.
    #+begin_src Lisp
    ;; these two are equivalent
    (mapcar (function exp) '(1 3 5))
    (mapcar #'exp '(1 3 5))
    #+end_src
*** `
    Enters data mode, but allows flipping between data and code mode using a
    comma. Called quasiquoting.
    #+begin_src Lisp
    `(2 + 1 is ,(+ 2 1) and 3 + 1 is ,(+ 3 1))
    #+end_src
*** :
    Placing the colon before a symbol makes it a keyword, which always means
    itself, and cannot be redefined.
    #+begin_src Lisp
    :cat
    ;; error - cannot change cat
    (let ((:cat 5))
      :cat)
    #+end_src
    This can be used to reduce errors, when it is known that a symbol always
    means itself, and can also be optimised by the compiler.
* terminology
** quasiquoting
   This is the term for a piece of code which uses the backtick to allow
   flipping between code and data mode.
   #+begin_src Lisp
   `(one plus one is ,(+ 1 1) and three squared is ,(expt 3 2))
   #+end_src
** special form
   A special form is a function which has some special privileges, which
   includes:
   1. Not having to evaluate all of its parameters (e.g. if)
      
** higher order function
   A function that accepts another function as an argument, e.g. =mapcar=.
** generic function
   A function that can accept multiple data types as parameters and handle them
   correctly, e.g. substitute-if.
* concepts
** stealth conditionals
    The =and= and =or= functions can be used to do clean conditionals due to the
    fact that Lisp uses shortcut boolean evaluation, along with their more usual
    function.
**** and
     Evaluates to true if all the symbols passed to it are true.
     #+begin_src Lisp
     (and (oddp 1) (oddp 3) (oddp 5))
     #+end_src
     An example of cleaner conditionals because of the use of =and=:
     #+begin_src Lisp
     ;; Basic conditional - quite cumbersome
     (if (*file-modified)
         (if (ask-about-save)
             (save-file)))
     ;; better conditional
     (and (*file-modified*) (ask-about-save) (save-file))
     ;; best of both
     (if (and (*file-modified*)
	      (ask-about-save))
	 (save-file))
     #+end_src
     In the first case, the standard conditional works, but is a little bit
     cumbersome. The second, better one is a lot cleaner, and does exactly the
     same thing. There is, however, the problem that =(save-file)= does more
     than just returning true or false, and that might not be obvious. The third
     case is the best of both, where only expressions that specifically return a
     boolean are used in the conditional.
**** or
     Evaluates to true if at least one of the symbols passed to it is true.
     #+begin_src Lisp
     (or (oddp 1) (oddp 4) (oddp 8))
     #+end_src
     An example of the use of =or= as a conditional:
     #+begin_src Lisp
     ;; set the parameter to t only if the parameter is even.
     (defparameter *ev* nil)
     (or (oddp 4) (setf *ev* t)) 
     #+end_src
     Since =(oddp 4)= evaluates to false, execution continues to the next, so
     the variable is set. If the value used was 5, then the or would stop after
     finding that the value of =(oddp 5)= was true.
** rich return values
   Because of the way Lisp deals with truth and falsity, functions can return
   more than just the truth. A good example is the =member= function, which
   instead of just returning true or false, returns the member and subsequent
   members in the list. The additional benefit of this is that it allows the
   function to search for =nil= elements and still evaluate to true.

   Another function which benefits from this is =find-if=, which returns the
   first element of a list for which a given function evaluates to true. This
   allows it to be used both for conditionals, and also to retrieve values.   

** predicates
   Functions which return true or false values are called predicates. Such
   functions often have the =-p= suffix to indicate this, for example
   =is-flag-set-p=.
** keyword parameters
   Some functions take keyword parameters which allow access to some built in
   features.
   #+begin_src Lisp
   ;; finds elements in the list where the cadr value is 'y
   (find 'y '((3 x) (4 y) (5 z)) :key #'cadr)
   #+end_src
   Keyword parameters have two parts.
   1. The name, which begins with a colon (e.g. =:key=)
   2. The value
** code and data symmetry
   Program code and data can be treated interchangeably in Lisp. This is called
   /homoiconicity/.
   
   A simple example of the homoiconicity is with code and data mode, but it goes
   deeper than this. Raw code stored inside a variable can be executed with the
   =eval= function.
   #+begin_src Lisp
   (defparameter *sum* '(+ 2 3))
   (eval *sum*)
   #+end_src
** lambda
   Super. Important.

   In Lisp, functions are things that can be passed around just as any other
   thing that you might want to use.
   #+begin_src Lisp
   (defun half (n)
     (/ n 2))
   (mapcar #'half '(2 3 5 7 9 11 13 14))
   ;; is equivalent to
   (mapcar (lambda (n) (/ n 2)) '(2 3 5 7 9 11 13 14))
   #+end_src
   Lambda allows the definition of functions without having to give them a
   name. This means that you don't have to define functions which aren't used
   much explicitly, but use lambdas instead.

   The lambda command is a macro. As a result, it does not have to evaluate all
   of its parameters. In general, talking about lambdas means talking about
   functions defined using the lambda macro.

   Lambda forms the most central part of Lisp. In a mathematical sense, there is
   no command other than lambda. Thus, Lisp is, in its entirety, derived from
   this very command.
** thunks/suspensions
   Often create functions with no arguments to describe computations that should
   be run later. Functions with no arguments are called /nullary functions/. In
   the scenario of computations to be run later, they are also known as /thunks/
   or /suspensions/.
* idioms
** push/assoc idiom
   Pushing new items onto a list without removing previous ones seems a bit
   weird. For example, in the text game, pushing an object onto the object list
   again rather than removing or changing the location when the player picks it
   up. When =assoc= is used, however, it always looks at the first key in the
   list that matches, and so it seems almost as though the previous copy of the
   object has been removed, where in fact it is still retained, keeping a
   history of all the old values.
* REPL
** customisation
   A REPL is easily customised by using some combination of the =read=, =eval=,
   =print=, and =loop= functions. A basic REPL:
   #+begin_src Lisp
   (defun repl ()
     (loop (print (eval (read)))))
   #+end_src
